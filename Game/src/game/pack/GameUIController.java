package game.pack;

import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.TextField;
import javafx.scene.control.ToggleButton;
import javafx.scene.image.ImageView;
import javafx.stage.Stage;

import java.net.URL;
import java.util.ArrayList;
import java.util.ResourceBundle;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

public class GameUIController implements Initializable {

    @FXML
    private Label outputLabelTextStatic;

    @FXML
    private Label outputLabelCoinsStatic;

    @FXML
    private Label outputLabel3;

    @FXML
    private Button generateBtn;

    @FXML
    private ImageView imageView1;

    @FXML
    private ImageView image1;

    @FXML
    private ImageView image2;

    @FXML
    private ImageView image3;

    @FXML
    private Button newGame;

    @FXML
    private Button quitBtn;

    @FXML
    private Label highScoreLabel;

    @FXML
    private Button goToMenuBtn;

    @FXML
    private ImageView imageView;

    @FXML
    private ImageView imageView2;

    @FXML
    private ImageView imageView3;

    @FXML
    private ImageView imageView4;

    @FXML
    private ImageView imageView5;

    @FXML
    private ImageView imageView6;

    @FXML
    private ImageView imageView7;

    @FXML
    private ImageView imageView8;

    @FXML
    private ImageView imageView9;

    @FXML
    private ImageView imageView10;

    @FXML
    private ImageView imageView11;

    @FXML
    private ImageView imageView12;

    @FXML
    private Label outputLabelTextPreloaded;

    @FXML
    private Label outputLabelCoinsPreloaded;

    @FXML
    private ToggleButton playOneBtn;

    @FXML
    private ToggleButton playThreeBtn;

    @FXML
    private ToggleButton playAllBtn;

    @FXML
    private Button skipBtn;

    @FXML
    private Label winAmountLabel;

    @FXML
    private Label highScoreLabel1;

    @FXML
    private TextField saveNameLabel;

    //ArrayList<String> catalogueAutoGenerated;

    ArrayList<String> catalogue;

    ArrayList<String> catalogueNormal;

    ArrayList<String> catalogueHard;

    GameDrawReel drawReel1;

    GameDrawReel drawReel2;

    GameDrawReel drawReel3;

    private Calculation calculation;

    private HighScore highScore;

    private boolean gameOver = false;

    private LoadGenerateImages imageLoad;

    private String settingsFilename = "Game/src/settings/settings.txt";

    private String scoreFilename = "Game/src/score/score.txt";

    private int coinsRead;

    private String difficultyRead;




    @Override
    public void initialize(URL location, ResourceBundle resources) {
        ////Auto generation/////
        //imageLoad = new LoadGenerateImages("Game/src/images/");
        //catalogueAutoGenerated =



        LoadRestoreSettings lrs = new LoadRestoreSettings(settingsFilename);
        coinsRead = lrs.getCoinsRead();
        difficultyRead = lrs.getDifficultyRead();

        calculation = new Calculation(coinsRead);

        highScore = new HighScore(scoreFilename);

        quitBtn.setVisible(false);
        newGame.setVisible(false);
        skipBtn.setVisible(false);

        catalogueNormal = new ArrayList<>();
        catalogueNormal.add("Game\\src\\images\\Apple.png");
        catalogueNormal.add("Game\\src\\images\\Banana.png");
        catalogueNormal.add("Game\\src\\images\\Lemon.png");
        catalogueNormal.add("Game\\src\\images\\Melon.png");
        catalogueNormal.add("Game\\src\\images\\Orange.png");
        catalogueNormal.add("Game\\src\\images\\Grape.png");
        catalogueNormal.add("Game\\src\\images\\Cherry.png");

        catalogueHard = new ArrayList<>();
        catalogueHard.addAll(catalogueNormal);
        catalogueHard.addAll(catalogueNormal);

        catalogueNormal.add("Game\\src\\images\\Joker.png");
        catalogueHard.add("Game\\src\\images\\Joker.png");

        if (difficultyRead.equals("normal")) {
            catalogue = catalogueNormal;
        } else if (difficultyRead.equals("hard")) {
            catalogue = catalogueHard;
        }

        //////////// inactive //////////

        //catalogueNormal.add("Game\\src\\images\\Crystal.png");

        //////////// inactive //////////

        drawReel1 = new GameDrawReel(imageView, imageView2, imageView3, imageView4, 0, 345, -10, 720, catalogue);
        drawReel2 = new GameDrawReel(imageView5, imageView6, imageView7, imageView8, 0, 345, -10, 720, catalogue);
        drawReel3 = new GameDrawReel(imageView9, imageView10, imageView11, imageView12, 0, 345, -10, 720, catalogue);
        drawReel1.initialize();
        drawReel2.initialize();
        drawReel3.initialize();

        outputLabelTextStatic.setText("");
        outputLabelTextPreloaded.setText("");
        outputLabelTextPreloaded.setVisible(false);

        outputLabelCoinsStatic.setText(calculation.getCurrentAmount());
        outputLabelCoinsPreloaded.setVisible(false);

        winAmountLabel.setText("");


    }

    @FXML
    void showReels(ActionEvent event) {

        if (!gameOver && calculation.playPossible() && (playOneBtn.isSelected() || playThreeBtn.isSelected() || playAllBtn.isSelected())) {

            if (playAllBtn.isSelected()) calculation.setPlayAmount(Integer.valueOf(calculation.getCurrentAmount()));

            generateBtn.setVisible(false);
            skipBtn.setDisable(false);
            skipBtn.setVisible(true);
            quitBtn.setVisible(false);

            winAmountLabel.setVisible(false);

            outputLabelTextStatic.setVisible(false);
            outputLabelTextPreloaded.setVisible(false);

            outputLabelCoinsStatic.setVisible(true);
            outputLabelCoinsStatic.setText(String.valueOf(Integer.valueOf(calculation.getCurrentAmount()) - calculation.getPlayAmount()));
            outputLabelCoinsPreloaded.setVisible(false);

            drawReel1.generateAndPlay();
            drawReel2.generateAndPlay();
            drawReel3.generateAndPlay();

            // static images
            //String path1 = imageLoad.randomImageFilename();
            //String path2 = imageLoad.randomImageFilename();
            //String path3 = imageLoad.randomImageFilename();
            //
            //image1.setImage(new Image(new File(path1).toURI().toString()));
            //image2.setImage(new Image(new File(path2).toURI().toString()));
            //image3.setImage(new Image(new File(path3).toURI().toString()));
            //
            //calculation.parse(drawReel1.getRandomlyGeneratedImageFilename(), drawReel2.getRandomlyGeneratedImageFilename(), drawReel3.getRandomlyGeneratedImageFilename());
            //String result = calculation.evaluate();

            calculation.parse(drawReel1.getRandomlyGeneratedImageFilename(), drawReel2.getRandomlyGeneratedImageFilename(), drawReel3.getRandomlyGeneratedImageFilename());
            String result = calculation.evaluate();

            outputLabelTextPreloaded.setText(result);
            outputLabelCoinsPreloaded.setText(calculation.getCurrentAmount());

            if (calculation.getWinAmount() > 0) {
                winAmountLabel.setText("+" + String.valueOf(calculation.getWinAmount()));
            } else {
                winAmountLabel.setText("");
            }

            //////// temp ///////////
            //drawReel1.skipAnimation();
            //drawReel2.skipAnimation();
            //drawReel3.skipAnimation();
            //////// temp ///////////

            ScheduledExecutorService ses = Executors.newSingleThreadScheduledExecutor();
            ses.scheduleAtFixedRate(new Runnable() {
                @Override
                public void run() {

                    if (drawReel1.isAnimationFinished() && drawReel2.isAnimationFinished() && drawReel3.isAnimationFinished()) {
                        outputLabelTextStatic.setVisible(false);
                        outputLabelCoinsStatic.setVisible(false);
                        outputLabelTextPreloaded.setVisible(true);
                        outputLabelCoinsPreloaded.setVisible(true);

                        winAmountLabel.setVisible(true);

                        if (Integer.valueOf(calculation.getCurrentAmount()) < 3) {
                            playThreeBtn.setDisable(true);
                            playOneBtn.setSelected(true);
                            calculation.setPlayAmount(1);
                        } else {
                            playThreeBtn.setDisable(false);
                        }

                        if (result.equals("Game over!")) {
                            gameOver = true;
                            newGame.setVisible(true);
                            generateBtn.setVisible(false);
                            quitBtn.setVisible(false);
                            skipBtn.setVisible(false);

                            playOneBtn.setDisable(true);
                            playThreeBtn.setDisable(true);
                            playAllBtn.setDisable(true);
                        } else {
                            generateBtn.setVisible(true);
                            skipBtn.setVisible(false);
                            quitBtn.setVisible(true);
                        }
                        System.out.println("All finished!!!!");

                        ses.shutdown();
                    }
                }
            }, 0, 50, TimeUnit.MILLISECONDS);
        }
    }


    @FXML
    void PlayOne(ActionEvent event) {
        calculation.setPlayAmount(1);
    }

    @FXML
    void PlayThree(ActionEvent event) {
        calculation.setPlayAmount(3);
    }

    @FXML
    void playAll(ActionEvent event) {
        calculation.setPlayAmount(Integer.valueOf(calculation.getCurrentAmount()));
    }


    @FXML
    void quitAndSave(ActionEvent event) {
        //outputLabelTextStatic.setText("To start press Start New Game");


        String highscoreSaveProcessAnwser = highScore.save(calculation.getCurrentAmount());
        highScoreLabel.setText(highscoreSaveProcessAnwser);
        if (!highscoreSaveProcessAnwser.contains("Not greater than previously achieved ")) {
            outputLabelCoinsStatic.setText("");
            newGame.setVisible(true);
            generateBtn.setVisible(false);
            quitBtn.setVisible(false);
            gameOver = true;
        } else {
            highScoreLabel1.setVisible(true);
            saveNameLabel.setVisible(true);

        }
        //highScoreLabel.setText("High score:" + highScore.getHighScore());
    }


    @FXML
    void newGame(ActionEvent event) {
        newGame.setVisible(false);
        winAmountLabel.setVisible(false);
        generateBtn.setVisible(true);

        calculation = new Calculation(coinsRead);
        gameOver = false;

        playOneBtn.setDisable(false);
        playThreeBtn.setDisable(false);
        playAllBtn.setDisable(false);

        if (playThreeBtn.isSelected()) {
            calculation.setPlayAmount(3);
            playThreeBtn.setDisable(false);
        } else {
            playOneBtn.setSelected(true);
            calculation.setPlayAmount(1);
        }

        if (playAllBtn.isSelected()) {
            playOneBtn.setSelected(true);
            calculation.setPlayAmount(1);
        }

        outputLabelTextStatic.setVisible(true);
        outputLabelTextStatic.setText("");
        outputLabelTextPreloaded.setText("");
        outputLabelTextPreloaded.setVisible(false);

        outputLabelCoinsPreloaded.setVisible(false);
        outputLabelCoinsStatic.setVisible(true);
        outputLabelCoinsStatic.setText(calculation.getCurrentAmount());

    }

    @FXML
    void skipAnimation(ActionEvent event) {
        drawReel1.skipAnimation();
        drawReel2.skipAnimation();
        drawReel3.skipAnimation();
        skipBtn.setDisable(true);

    }


    @FXML
    void goToMenu(ActionEvent event) throws Exception {
        Parent blah = FXMLLoader.load(getClass().getResource("MainMenu.fxml"));
        Scene scene = new Scene(blah);
        Stage appStage = (Stage) ((Node) event.getSource()).getScene().getWindow();
        appStage.setScene(scene);
        appStage.show();
    }
}
